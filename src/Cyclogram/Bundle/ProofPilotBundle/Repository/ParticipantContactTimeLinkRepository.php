<?php
namespace Cyclogram\Bundle\ProofPilotBundle\Repository;

use Cyclogram\Bundle\ProofPilotBundle\Entity\ParticipantContactTimeLink;
use Cyclogram\Bundle\ProofPilotBundle\Entity\ParticipantContactTime;

use Doctrine\ORM\EntityRepository;

/**
 * StudyLanguageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ParticipantContactTimeLinkRepository extends EntityRepository
{
    /**
     * Get the participant contact time link
     * @param unknown_type $participant
     * @param unknown_type $reminder
     * @return Ambigous <\Cyclogram\Bundle\ProofPilotBundle\Entity\ParticipantStudyReminderLink, \Doctrine\ORM\mixed, NULL, mixed, unknown>
     */
    public function getParticipantContactTimeLinkByTime ($participant, $contactTime)
    {
        $query = $this->getEntityManager()
        ->createQuery("
                SELECT pctl
                FROM CyclogramProofPilotBundle:ParticipantContactTimeLink pctl
                WHERE
                pctl.participant = :participant
                AND
                pctl.participantContactTime = :contacttime
                ")
                ->setParameter("participant", $participant)
                ->setParameter("contacttime", $contactTime);
    
        $result = $query->getOneOrNullResult();
        
        return $result;
    }

    public function getParticipantContactTimeLinkByDay ($participant, $contacDay)
    {
        $query = $this->getEntityManager()
        ->createQuery("
                SELECT pctl
                FROM CyclogramProofPilotBundle:ParticipantContactTimeLink pctl
                WHERE
                pctl.participant = :participant
                AND
                pctl.participantContactTime = :contacttime
                ")
                ->setParameter("participant", $participant)
                ->setParameter("contacttime", $contacDay);
    
        $result = $query->getOneOrNullResult();
    
        return $result;
    }
    
    
    
    public function updateParticipantContactTimeLink($participant, $contactTime, $contactDay, $timezone, $isActiveWeekday, $isActiveContactTime)
    {
        $em = $this->getEntityManager();
        
        if(!$isActiveWeekDay || !$isActiveContactTime) {
            $em->createQuery("
                    DELETE FROM CyclogramProofPilotBundle:ParticipantContactTimeLink pctl
                    WHERE
                    pctl.participant = :participant
                    AND
                    pctl.participantContactTime = :contacttime
                    AND
                    pctl.participantWeekday = :contactday
                    ")
                    ->setParameter("participant", $participant)
                    ->setParameter("contacttime", $contactTime)
                    ->setParameter("contactday", $contactDay)
                    ->execute();
        } else {
            $contactTimeLinks = $em->createQuery("
                SELECT COUNT(pctl)
                FROM CyclogramProofPilotBundle:ParticipantContactTimeLink pctl
                WHERE
                pctl.participant = :participant
                AND
                pctl.participantContactTime = :contacttime
                AND  
                pctl.participantWeekday = :contactday
            ")
            ->setParameter("participant", $participant)
            ->setParameter("contacttime", $contactTime)
            ->setParameter("contactday", $contactDay)
            ->getSingleScalarResult();
            
            if(!$contactTimeLinks) {
                $em = $this->getDoctrine()->getManager();
                $contactTimeLink = new ParticipantContactTimeLink();
                $contactTimeLink->setParticipant($participant);
                $contactTimeLink->setParticipantContactTime($contactTime);
                $contactTimeLink->setParticipantTimezone($timezone);
                $contactTimeLink->setParticipantWeekday($contactDay);
                $contactTimeLink->setServerContactTime($contactTime);
                $contactTimeLink->setServerWeekday($contactDay);
                $em->persist($contactTimeLink);
                $em->flush();
            } else {
                $em->createQuery("
                        UPDATE CyclogramProofPilotBundle:ParticipantContactTimeLink pctl
                        SET pctl.participantTimezone = " . $timezone->getParticipantTimezoneId() . " 
                        WHERE
                        pctl.participant = :participant
                        AND
                        pctl.participantContactTime = :contacttime
                        AND
                        pctl.participantWeekday = :contactday
                        ")
                        ->setParameter("participant", $participant)
                        ->setParameter("contacttime", $contactTime)
                        ->setParameter("contactday", $contactDay)
                        ->execute();
            }
        }
    }
    

}
