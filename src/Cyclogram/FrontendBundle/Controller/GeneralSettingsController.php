<?php

namespace Cyclogram\FrontendBundle\Controller;

use Cyclogram\Bundle\ProofPilotBundle\Entity\ParticipantStudyReminderLink;

use Symfony\Component\HttpFoundation\Response;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Cyclogram\FrontendBundle\Form\GeneralSettingForm;
use Cyclogram\CyclogramCommon;
use Cyclogram\Bundle\ProofPilotBundle\Entity\Participant;

/**
 * @Route("/main")
 */
class GeneralSettingsController  extends Controller
{
    /**
     * @Route("/general_settings", name="_settings")
     * @Template()
     */
    public function generalSettingsAction()
    {
        $participant = $this->get('security.context')->getToken()->getUser();
        $request = $this->getRequest();
        $em = $this->getDoctrine()->getManager();
        $surveyscount = $em->getRepository('CyclogramProofPilotBundle:Participant')->getParticipantInterventions($participant);
        
        $parameters["lastaccess"] = new \DateTime();
        $parameters["invalidFormClass"] = '';
         
        if(!$participant->getFacebookId())
            $parameters["user"]["avatar"] = "/images/tmp_avatar.jpg";
        else
            $parameters["user"]["avatar"] = "http://graph.facebook.com/" . $participant->getParticipantUsername() . "/picture?width=80&height=82";

        $form = $this->createForm(new GeneralSettingForm($this->container));

        if ($request->getMethod() == 'POST') {
            $form->handleRequest($request);
            if ($form->isValid()) {
                $data = $form->getData();

                if ($data['validationCheck'] == 'username') {
                    $participant->setParticipantUsername($data['newUserName']);
                    $em->persist($participant);
                    $em->flush();
                    $parameters['message'] = "Your username has been changed";
                }
                
                if ($data['validationCheck'] == 'password-sms') {
                    $participantSMSCode = CyclogramCommon::getAutoGeneratedCode(4);
                    $participant->setParticipantMobileSmsCode($participantSMSCode);
                    $sms = $this->get('sms');
                    $sentSms = $sms->sendSmsAction( array('message' => "Your password reset code is $participantSMSCode", 'phoneNumber'=>$participant->getParticipantMobileNumber()) );
                    if($sentSms) {
                        $session = $request->getSession();
                        $session->set('newPassword', $data['newPassword']);
                        $em->persist($participant);
                        $em->flush($participant);
                        $parameters['message'] = "Confirmation SMS has been sent to you";
                    }
                }
                
                if ($data['validationCheck'] == 'password') {
                    $session = $request->getSession();
                    if ($session->has('newPassword')) {
                        $participant->setParticipantPassword($session->get('newPassword'));
                        $em->persist($participant);
                        $em->flush($participant);
                        $session->invalidate();
                        $parameters['message'] = "Your password has been changed";
                    }
                }
                if ($data['validationCheck'] == 'email') {
                    $participant->setParticipantEmail($data['newEmail']);
                    $em->persist($participant);
                    $em->flush($participant);
                    $parameters['message'] = "Your email has been changed";
                }
                
                if ($data['validationCheck'] == 'mobile-sms') {
                    $participantSMSCode = CyclogramCommon::getAutoGeneratedCode(4);
                    $participant->setParticipantMobileSmsCode($participantSMSCode);
                    
                    $sms = $this->get('sms');
                    $sentSms = $sms->sendSmsAction( array('message' => "Your mobile phone change code is $participantSMSCode", 'phoneNumber'=> $data['newPhoneNumber']) );
                    if($sentSms) {
                        $session = $request->getSession();
                        $session->set('newPhoneNumber', $data['newPhoneNumber']);
                        $em->persist($participant);
                        $em->flush($participant);
                        $parameters['message'] = "Confirmation SMS has been sent to you";
                    }
                   
                }
                
                if ($data['validationCheck'] == 'mobile') {
                    $session = $request->getSession();
                    if ($session->has('newPhoneNumber')) {
                        $participant->setParticipantMobileNumber($session->get('newPhoneNumber'));
                        $em->persist($participant);
                        $em->flush($participant);
                        $session->invalidate();
                        $parameters['message'] = "Your mobile numder has been changed";
                    }
                }
                $parameters['form'] = $form->createView();
                
                if($data['validationCheck'] == "password-sms") {
                    $data['validationCheck'] = "password";
                    $parameters["invalidFormClass"] = $data['validationCheck'];
                }
                if($data['validationCheck'] == "mobile-sms") {
                    $data['validationCheck'] = "mobile";
                    $parameters["invalidFormClass"] = $data['validationCheck'];
                }
                
            } 
            else {
                $data = $form->getData();
                if($data['validationCheck'] == "password-sms") $data['validationCheck'] = "password";
                if($data['validationCheck'] == "mobile-sms") $data['validationCheck'] = "mobile";
                $parameters["invalidFormClass"] = $data['validationCheck'];
            }
            
        }
        
        $parameters["participant"] = $participant;
        
        $parameters["user"]["name"] = $participant->getParticipantFirstname() . ' ' . $participant->getParticipantLastname();
        $parameters["user"]["username"] = $participant->getParticipantUsername();
        $parameters["user"]["last_access"] = $participant->getParticipantLastTouchDatetime();
        
        $parameters['form'] = $form->createView();
            
        return $this->render('CyclogramFrontendBundle:GeneralSettings:general_settings.html.twig', $parameters);
    }
    
    /**
     * @Route("/contact_prefs", name="_contact_prefs")
     * @Template()
     */
    public function contactPrefsAction()
    {
        $participant = $this->get('security.context')->getToken()->getUser();
        $request = $this->getRequest();
        $em = $this->getDoctrine()->getManager();
        
        $reminders = $em->getRepository('CyclogramProofPilotBundle:ParticipantStudyReminder')->findAll();
        $reminderLinks = $em->getRepository('CyclogramProofPilotBundle:ParticipantStudyReminderLink')->findByParticipant($participant);
        
        $remindersData = array();
        
        foreach($reminders as $reminder) {
            $reminderId = $reminder->getParticipantStudyReminderId();
            $reminderLinks = $em->getRepository('CyclogramProofPilotBundle:ParticipantStudyReminderLink')->findBy(
                    array('participant'=>$participant,
                          'participantStudyReminder'=>$reminder));
            $bySMS = false;
            $byEmail = false;
            if($reminderLinks) {
            
                if($reminderLinks[0]->getBySMS() == true) {
                    $bySMS = true;
                } 
                if($reminderLinks[0]->getByEmail() == true) {
                    $byEmail = true;
                }
            }
            
            
            $remindersData[] = array(
                    'reminder' => $reminder,
                    'bySMS' => $bySMS,
                    'byEmail' => $byEmail
            );
        }
        
        
        $datetimes = $em->getRepository('CyclogramProofPilotBundle:ParticipantContactTime')->findAll();
        $timezones = $em->getRepository('CyclogramProofPilotBundle:ParticipantTimezone')->findAll();
        $parameters = array();
        
       
        
        $parameters['datetimes'] = $datetimes;
        $parameters['timezones'] = $timezones;
        $parameters['weekdays'] =  array(
                0=>'day_sunday',
                1=>'day_monday',
                2=>'day_tuesday',
                3=>'day_wednesday',
                4=>'day_thursday',
                5=>'day_friday',
                6=>'day_saturday'
                );
        
        if ($request->getMethod() == 'POST') {
            
            
            $savedata = $request->get('savedata');
            switch($savedata) {
                case 'reminders':
                    $reminders = $em->getRepository('CyclogramProofPilotBundle:ParticipantStudyReminder')->findAll();
                    foreach($reminders as $reminder)
                    {
                        $reminder_id = $reminder->getParticipantStudyReminderId();
                        $reminderSMS = $request->get('sms_' . $reminder_id);
                        $reminderEmail = $request->get('email_' . $reminder_id);
                            $reminderLinks = $em->getRepository('CyclogramProofPilotBundle:ParticipantStudyReminderLink')->findBy(
                                    array('participant'=>$participant,
                                          'participantStudyReminder'=>$reminder));
                            
                            if($reminderLinks) {
                                $participantReminderLink = $reminderLinks[0];
                            } else {
                                $participantReminderLink = new ParticipantStudyReminderLink();
                            }
                            $participantReminderLink->setParticipant($participant);
                            $participantReminderLink->setParticipantStudyReminder($reminder);
                            if($reminderSMS) {
                                $participantReminderLink->setBySMS(true);
                            } else {
                                $participantReminderLink->setBySMS(false);
                            }
                            if($reminderEmail) {
                                $participantReminderLink->setByEmail(true);
                            } else {
                                $participantReminderLink->setByEmail(false);
                            }
                            $em->persist($participantReminderLink);
                            $em->flush();

                        

                        
                    }
                    $parameters['message'] = 'Your contact prefernces have been saved';
                    break;
                case 'date_of_week':
                    $parameters['message'] = 'Your contact prefernces have been saved';
                    break;
                case 'time_of_day':
                    $parameters['message'] = 'Your contact prefernces have been saved';
                    break;
                    
            }
            $parameters['savedata'] = $savedata;
            
            
            
        }
        
        $remindersData = array();
        
        foreach($reminders as $reminder) {
            $reminderId = $reminder->getParticipantStudyReminderId();
            $reminderLinks = $em->getRepository('CyclogramProofPilotBundle:ParticipantStudyReminderLink')->findBy(
                    array('participant'=>$participant,
                            'participantStudyReminder'=>$reminder));
            $bySMS = false;
            $byEmail = false;
            if($reminderLinks) {
        
                if($reminderLinks[0]->getBySMS() == true) {
                    $bySMS = true;
                }
                if($reminderLinks[0]->getByEmail() == true) {
                    $byEmail = true;
                }
            }
        
        
            $remindersData[] = array(
                    'reminder' => $reminder,
                    'bySMS' => $bySMS,
                    'byEmail' => $byEmail
            );
        }
        $parameters['remindersData'] = $remindersData;

        
        $parameters["lastaccess"] = new \DateTime();
        $parameters["participant"] = $participant;
         
        if(!$participant->getFacebookId())
            $parameters["user"]["avatar"] = "/images/tmp_avatar.jpg";
        else
            $parameters["user"]["avatar"] = "http://graph.facebook.com/" . $participant->getParticipantUsername() . "/picture?width=80&height=82";
        
        $parameters["user"]["name"] = $participant->getParticipantFirstname() . ' ' . $participant->getParticipantLastname();
        $parameters["user"]["last_access"] = $participant->getParticipantLastTouchDatetime();
        
        return $this->render('CyclogramFrontendBundle:GeneralSettings:contact_prefs.html.twig', $parameters);
    }
}
