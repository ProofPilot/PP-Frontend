<?php
/*
* This is part of the ProofPilot package.
*
* (c)2012-2013 Cyclogram, Inc, West Hollywood, CA <crew@proofpilot.com>
* ALL RIGHTS RESERVED
*
* This software is provided by the copyright holders to Manila Consulting for use on the
* Center for Disease Control's Evaluation of Rapid HIV Self-Testing among MSM in High
* Prevalence Cities until 2016 or the project is completed.
*
* Any unauthorized use, modification or resale is not permitted without expressed permission
* from the copyright holders.
*
* KnowatHome branding, URL, study logic, survey instruments, and resulting data are not part
* of this copyright and remain the property of the prime contractor.
*
*/

namespace Cyclogram\FrontendBundle\Controller;

use Cyclogram\Bundle\ProofPilotBundle\Entity\ParticipantStudyReminderLink;

use Symfony\Component\HttpFoundation\Response;

use Cyclogram\FrontendBundle\Form\MailingAddressForm;
use Symfony\Component\Validator\Constraints\Collection;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Cyclogram\FrontendBundle\Form\GeneralSettingForm;
use Cyclogram\CyclogramCommon;
use Cyclogram\Bundle\ProofPilotBundle\Entity\Participant;
use JMS\SecurityExtraBundle\Annotation\Secure;

/**
 * @Route("/main")
 */
class GeneralSettingsController  extends Controller
{

    /**
     * @Route("/general_settings", name="_settings")
     * @Secure(roles="ROLE_PARTICIPANT")
     * @Template()
     */
    public function generalSettingsAction()
    {
        $participant = $this->get('security.context')->getToken()->getUser();
        $request = $this->getRequest();
        $em = $this->getDoctrine()->getManager();
        $surveyscount = $em->getRepository('CyclogramProofPilotBundle:Participant')->getActiveParticipantInterventionsCount($participant);
        $locale =$participant->getLocale() ? $participant->getLocale() : $request->getLocale();
        $parameters["lastaccess"] = new \DateTime();
        $parameters["expandedFormClass"] = '';
         
        if($participant->getFacebookId())
            $parameters["user"]["avatar"] = "http://graph.facebook.com/" . $participant->getParticipantUsername() . "/picture?width=80&height=82";

        $form = $this->createForm(new GeneralSettingForm($this->container));

        $clientIp = $request->getClientIp();
        if ($clientIp == '127.0.0.1') {
            $form->get('newPhoneNumberSmall')->setData(380);
        }
        $geoip = $this->get('maxmind.geoip')->lookup($clientIp);
        if ($geoip != false) {
            $countryCode = $geoip->getCountryCode();
            $country = $em->getRepository('CyclogramProofPilotBundle:Country')->findOneByCountryCode($countryCode);
            if (isset($country)){
                $form->get('phone_small')->setData($country->getDailingCode());
            }
        }
        
        if ($request->getMethod() == 'POST') {
            $form->handleRequest($request);

            if ($form->isValid()) {
                $data = $form->getData();

                if($form->get('userNameConfirm')->isClicked()) {
                    $participant->setParticipantUsername($data['newUserName']);
                    $em->persist($participant);
                    $em->flush();
                    $parameters['message'] = $this->get('translator')->trans("username_change", array(), "general_settings", $locale);
                } elseif ($form->get('passwordSendSMS')->isClicked()) {
                    $participantSMSCode = CyclogramCommon::getAutoGeneratedCode(4);
                    $participant->setParticipantMobileSmsCode($participantSMSCode);
                    $sms = $this->get('sms');
                    $message = $this->container->get('translator')->trans('sms_password_text', array(), "general_settings",  $locale);
                    $sentSms = $sms->sendSmsAction( array('message' => $message.' '.$participantSMSCode, 'phoneNumber'=>$participant->getParticipantMobileNumber()) );
                    if($sentSms) {
                        $session = $request->getSession();
                        $session->set('newPassword', $data['newPassword']);
                        $em->persist($participant);
                        $em->flush($participant);
                        $parameters['message'] = $this->get('translator')->trans("confirm_sms_send", array(), "general_settings", $locale);
                    }
                    $parameters["expandedFormClass"] = 'password';
                } elseif ($form->get('passwordConfirm')->isClicked()) {
                    $session = $request->getSession();
                    if ($session->has('newPassword')) {
                        $participant->setParticipantPassword($session->get('newPassword'));
                        $em->persist($participant);
                        $em->flush($participant);
                        $session->invalidate();
                        $parameters['message'] = $this->get('translator')->trans("password_change", array(), "general_settings", $locale);
                    }
                } elseif ($form->get('emailConfirm')->isClicked()) {
                    $participant->setParticipantEmail($data['newEmail']);
                    $participant->setParticipantEmailConfirmed(false);
                    $em->persist($participant);
                    $em->flush($participant);

                    $cc = $this->get('cyclogram.common');
                    $embedded['logo_top'] = realpath($this->container->getParameter('kernel.root_dir') . "/../web/images/newsletter_logo.png");
                    $embedded['logo_footer'] = realpath($this->container->getParameter('kernel.root_dir') . "/../web/images/newletter_logo_footer.png");
                    $embedded['login_button'] = realpath($this->container->getParameter('kernel.root_dir') . "/../web/images/newsletter_small_login.jpg");
                    $embedded['white_top'] = realpath($this->container->getParameter('kernel.root_dir') . "/../web/images/newsletter_white_top.png");
                    $embedded['white_bottom'] = realpath($this->container->getParameter('kernel.root_dir') . "/../web/images/newsletter_white_bottom.png");
                    
                    $parameters['email'] = $participant->getParticipantEmail();
                    $parameters['locale'] = $locale;
                    $parameters['host'] = $this->container->getParameter('site_url');
                    $parameters['code'] = $participant->getParticipantEmailCode();
                    
                    $cc->sendMail($participant->getParticipantEmail(),
                            $this->get('translator')->trans("email_title_verify", array(), "email", $locale),
                            'CyclogramFrontendBundle:Email:email_confirmation.html.twig',
                            null,
                            $embedded,
                            true,
                            $parameters);
                    $parameters['message'] = $this->get('translator')->trans("email_change", array(), "general_settings", $locale);
                } elseif ($form->get('phoneSendSMS')->isClicked()) {
                    $participantSMSCode = CyclogramCommon::getAutoGeneratedCode(4);
                    $participant->setParticipantMobileSmsCode($participantSMSCode);
                    
                    $sms = $this->get('sms');
                             $message = $this->container->get('translator')->trans('sms_phone_text', array(), "general_settings",  $locale);
                    $sentSms = $sms->sendSmsAction( array('message' => $message.' '.$participantSMSCode, 'phoneNumber'=>$participant->getParticipantMobileNumber()) );
                    if($sentSms) {
                        $session = $request->getSession();
                        $session->set('newPhoneNumber', array($data['newPhoneNumberSmall'],$data['newPhoneNumberWide']));
                        $em->persist($participant);
                        $em->flush($participant);
                        $parameters['message'] = $this->get('translator')->trans("confirm_sms_send", array(), "general_settings", $locale);
                    }
                    $parameters["expandedFormClass"] = 'mobile';
                } elseif ($form->get('phoneConfirm')->isClicked()) {
                    $session = $request->getSession();
                    if ($session->has('newPhoneNumber')) {
                        $newPhoneNumber = $session->get('newPhoneNumber');
                        $participant->setParticipantMobileNumber($newPhoneNumber[0].$newPhoneNumber[1]);
                        $em->persist($participant);
                        $em->flush($participant);
                        $session->invalidate();
                        $parameters['message'] = $this->get('translator')->trans("mobile_number_change", array(), "general_settings", $locale);
                    }
                } elseif($form->get('incentiveEmailConfirm')->isClicked()) {
                        $participant->setParticipantAppreciationEmail($data['newIncentiveEmail']);
                        $em->persist($participant);
                        $em->flush($participant);
                        $parameters['message'] = $this->get('translator')->trans("appreciation_email_change", array(), "general_settings", $locale);
                }
            } 
            else {
               if($form->get('userNameConfirm')->isClicked()) {
                   $parameters["expandedFormClass"] = 'username';
                } elseif ($form->get('passwordSendSMS')->isClicked()) {
                    $parameters["expandedFormClass"] = 'password';
                } elseif ($form->get('passwordConfirm')->isClicked()) {
                    $parameters["expandedFormClass"] = 'password';
                } elseif ($form->get('emailConfirm')->isClicked()) {
                    $parameters["expandedFormClass"] = 'email';
                } elseif ($form->get('phoneSendSMS')->isClicked()) {
                    $parameters["expandedFormClass"] = 'mobile';
                } elseif ($form->get('phoneConfirm')->isClicked()) {
                    $parameters["expandedFormClass"] = 'mobile';
                } elseif ($form->get('incentiveEmailConfirm')->isClicked()) {
                    $parameters["expandedFormClass"] = 'incentiveEmail';
                } 
            }
        }
        
        $parameters["participant"] = $participant;
        
        $parameters["user"]["name"] = $participant->getParticipantFirstname() . ' ' . $participant->getParticipantLastname();
        $parameters["user"]["username"] = $participant->getParticipantUsername();
        $parameters["user"]["last_access"] = $participant->getParticipantLastTouchDatetime();
        
        $parameters['form'] = $form->createView();
            
        return $this->render('CyclogramFrontendBundle:GeneralSettings:general_settings.html.twig', $parameters);
    }
    
    /**
     * @Route("/shipping_information/{update}", name="_shipping", defaults={"update"=null})
     * @Secure(roles="ROLE_PARTICIPANT")
     * @Template()
     */
    public function generalShippingAction($update)
    {
        $participant = $this->get('security.context')->getToken()->getUser();
        $request = $this->getRequest();
        $em = $this->getDoctrine()->getManager();
        $surveyscount = $em->getRepository('CyclogramProofPilotBundle:Participant')->getActiveParticipantInterventionsCount($participant);
        $parameters["lastaccess"] = new \DateTime();
        if ($update)
            $parameters["update_data"] = $update;
        $parameters["expandedFormClass"] = '';
        $parameters["participant"] = $participant;
        
        $parameters["user"]["name"] = $participant->getParticipantFirstname() . ' ' . $participant->getParticipantLastname();
        $parameters["user"]["username"] = $participant->getParticipantUsername();
        $parameters["user"]["last_access"] = $participant->getParticipantLastTouchDatetime();
        if($participant->getFacebookId())
            $parameters["user"]["avatar"] = "http://graph.facebook.com/" . $participant->getParticipantUsername() . "/picture?width=80&height=82";
    
        $collectionConstraint = new Collection(array(
                'participantFirstname'     =>  new NotBlank(),
                'participantLastname'        => new NotBlank(),
                'participantAddress1'      => new NotBlank(),
                'participantZipcode' => new NotBlank(),
                'city'     => new NotBlank(),
                'state'    => new NotBlank()
        ));
        $form = $this->createForm(new MailingAddressForm($this->container), array('constraints' => $collectionConstraint));
    
        if ($participant->getParticipantFirstname()){
            $form->get('participantFirstname')->setData($participant->getParticipantFirstname());
        }
        if ($participant->getParticipantLastname()){
            $form->get('participantLastname')->setData($participant->getParticipantLastname());
        }
        if ($participant->getParticipantAddress1()){
            $form->get('participantAddress1')->setData($participant->getParticipantAddress1());
        }
        if ($participant->getParticipantAddress2()){
            $form->get('participantAddress2')->setData($participant->getParticipantAddress2());
        }
        if ($participant->getParticipantZipcode()){
            $form->get('participantZipcode')->setData($participant->getParticipantZipcode());
        }
        if ($participant->getCity()){
            $city = $participant->getCity();
            $form->get('city')->setData($city->getCityName());
            $form->get('cityId')->setData($city->getCityId());
        }
        if ($participant->getState()){
            $state = $participant->getState();
            $form->get('state')->setData($state->getStateCode());
            $form->get('stateId')->setData($state->getstateId());
        }
        $sign = $participant->getParticipantDeliverySign();
        if (isset($sign)){
            if ($sign == true) {
                $form['sign']->setData('sign');
            }else{
                $form['sign']->setData('notSign');
            }
        }
    
        if ($request->getMethod() == 'POST') {
            $form->handleRequest($request);
    
            if ($form->isValid()) {
                $form = $form->getData();
                $participant->setParticipantFirstname($form['participantFirstname']);
                $participant->setParticipantLastname($form['participantLastname']);
                $participant->setParticipantAddress1($form['participantAddress1']);
                $participant->setParticipantAddress2($form['participantAddress2']);
                $participant->setParticipantZipcode($form['participantZipcode']);
                if (!empty($form['cityId'])) {
                    $city = $em->getRepository('CyclogramProofPilotBundle:City')->find($form['cityId']);
                    $participant->setCity($city);
                } else {
                    $participant->setCityName($form['city']);
                }
                if (!empty($form['stateId'])) {
                    $state = $em->getRepository('CyclogramProofPilotBundle:State')->find($form['stateId']);
                    $participant->setState($state);
                } else {
                    $participant->setParticipantState($form['state']);
                }
                $country = $em->getRepository('CyclogramProofPilotBundle:Country')->find(1);
                $participant->setCountry($country);
                if ($form['sign'] == 'notSign')
                    $participant->setParticipantDeliverySign(false);
                else
                    $participant->setParticipantDeliverySign(true);
    
                $em->persist($participant);
                $em->persist($participant);
                $em->flush($participant);
                 return $this->redirect($this->generateUrl("_shipping",
                                array('update' => true)));
 
            }
        }
        
        $parameters['form'] = $form->createView();
    
        return $this->render('CyclogramFrontendBundle:GeneralSettings:shipping_information.html.twig', $parameters);
    }

}
