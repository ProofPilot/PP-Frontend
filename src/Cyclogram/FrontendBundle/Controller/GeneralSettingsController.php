<?php
/*
* This is part of the ProofPilot package.
*
* (c)2012-2013 Cyclogram, Inc, West Hollywood, CA <crew@proofpilot.com>
* ALL RIGHTS RESERVED
*
* This software is provided by the copyright holders to Manila Consulting for use on the
* Center for Disease Control's Evaluation of Rapid HIV Self-Testing among MSM in High
* Prevalence Cities until 2016 or the project is completed.
*
* Any unauthorized use, modification or resale is not permitted without expressed permission
* from the copyright holders.
*
* KnowatHome branding, URL, study logic, survey instruments, and resulting data are not part
* of this copyright and remain the property of the prime contractor.
*
*/

namespace Cyclogram\FrontendBundle\Controller;

use Cyclogram\Bundle\ProofPilotBundle\Entity\ParticipantRaceLink;

use Cyclogram\FrontendBundle\Form\UserSmsCodeForm;

use Cyclogram\Bundle\ProofPilotBundle\Entity\ParticipantStudyReminderLink;

use Symfony\Component\HttpFoundation\Response;

use Cyclogram\FrontendBundle\Form\MobilePhoneForm;

use Cyclogram\FrontendBundle\Form\SignUpAboutForm;


use Cyclogram\FrontendBundle\Form\MailingAddressForm;
use Cyclogram\FrontendBundle\Form\AboutMeForm;
use Symfony\Component\Validator\Constraints\Collection;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Cyclogram\FrontendBundle\Form\GeneralSettingForm;
use Cyclogram\CyclogramCommon;
use Cyclogram\Bundle\ProofPilotBundle\Entity\Participant;
use JMS\SecurityExtraBundle\Annotation\Secure;

/**
 * @Route("/main")
 */
class GeneralSettingsController  extends Controller
{

    private $parameters = array();
    
    public function preExecute()
    {
        $cc = $this->container->get('cyclogram.common');
        $this->parameters = $cc->defaultJsParameters($this->getRequest());
    }
    
    /**
     * @Route("/general_settings", name="_settings")
     * @Secure(roles="ROLE_PARTICIPANT, IS_AUTHENTICATED_REMEMBERED")
     * @Template()
     */
    public function generalSettingsAction()
    {
        $participant = $this->get('security.context')->getToken()->getUser();
        $request = $this->getRequest();
        $em = $this->getDoctrine()->getManager();
        $surveyscount = $em->getRepository('CyclogramProofPilotBundle:ParticipantInterventionLink')->getActiveParticipantInterventionsCount($participant);
        $locale =$participant->getLocale() ? $participant->getLocale() : $request->getLocale();
        $parameters["lastaccess"] = new \DateTime();
        $parameters["expandedFormClass"] = '';
        $parameters["passwordConfirmShow"] = false;
        $parameters["phoneConfirmShow"] = false;
         
        if($participant->getFacebookId())
            $parameters["user"]["avatar"] = "http://graph.facebook.com/" . $participant->getParticipantUsername() . "/picture?width=80&height=82";

        $form = $this->createForm(new GeneralSettingForm($this->container));

        $clientIp = $request->getClientIp();
        if ($clientIp == '127.0.0.1') {
            $form->get('newPhoneNumberSmall')->setData(380);
        }
        $geoip = $this->get('maxmind.geoip')->lookup($clientIp);
        if ($geoip != false) {
            $countryCode = $geoip->getCountryCode();
            $country = $em->getRepository('CyclogramProofPilotBundle:Country')->findOneByCountryCode($countryCode);
            if (isset($country)){
                $form->get('newPhoneNumberSmall')->setData($country->getDailingCode());
            }
        }
        
        if ($request->getMethod() == 'POST') {
            $form->handleRequest($request);

            if ($form->isValid()) {
                $data = $form->getData();

                if($form->get('userNameConfirm')->isClicked()) {
                    $participant->setParticipantUsername($data['newUserName']);
                    $em->persist($participant);
                    $em->flush();
                    $parameters['message'] = $this->get('translator')->trans("username_change", array(), "general_settings", $locale);
                } elseif ($form->get('passwordSendSMS')->isClicked()) {
                    $participantSMSCode = CyclogramCommon::getAutoGeneratedCode(4);
                    $participant->setParticipantMobileSmsCode($participantSMSCode);
                    $cc = $this->get('cyclogram.common');
                    $embedded = array();
                    $embedded = $cc->getEmbeddedImages();
                    $parameters['email'] = $participant->getParticipantEmail();
                    $parameters['locale'] = $participant->getLocale() ? $participant->getLocale() : $request->getLocale();
                    $parameters['host'] = $this->container->getParameter('site_url');
                    $parameters['code'] = $participantSMSCode;
                    $parameters["studies"] = $em->getRepository('CyclogramProofPilotBundle:Study')->getRandomStudyInfo($locale, $participant);
                    
                    $send = $cc->sendMail(null,
                            $participant->getParticipantEmail(),
                            $this->get('translator')->trans("email_title_change_password", array(), "email", $parameters['locale']),
                            'CyclogramFrontendBundle:Email:email_change_password.html.twig',
                            null,
                            $embedded,
                            true,
                            $parameters);
//                     $sms = $this->get('sms');
//                     $message = $this->container->get('translator')->trans('sms_password_text', array(), "general_settings",  $locale);
//                     $sentSms = $sms->sendSmsAction( array('message' => $message.' '.$participantSMSCode, 'phoneNumber'=>$participant->getParticipantMobileNumber()) );
                    if($send) {
                        $session = $request->getSession();
                        $session->set('newPassword', $data['newPassword']);
                        $em->persist($participant);
                        $em->flush($participant);
                        $parameters['message'] = $this->get('translator')->trans("confirm_sms_send", array(), "general_settings", $locale);
                    }
                    $parameters["passwordConfirmShow"] = true;
                    $parameters["expandedFormClass"] = 'password';
                } elseif ($form->get('passwordConfirm')->isClicked()) {
                    $session = $request->getSession();
                    if ($session->has('newPassword')) {
                        $factory = $this->get('security.encoder_factory');
                        $encoder = $factory->getEncoder($participant);
                        
                        $participant->setParticipantPassword($encoder->encodePassword($session->get('newPassword'), $participant->getSalt()));
                        $em->persist($participant);
                        $em->flush($participant);
                        $session->invalidate();
                        $parameters['message'] = $this->get('translator')->trans("password_change", array(), "general_settings", $locale);
                    }
                } elseif ($form->get('emailConfirm')->isClicked()) {
                    $participant->setParticipantEmail($data['newEmail']);
                    $participant->setParticipantEmailConfirmed(false);
                    $em->persist($participant);
                    $em->flush($participant);

                    $cc = $this->get('cyclogram.common');

                    $embedded = array();
                    $embedded = $cc->getEmbeddedImages();
                    
                    $parameters['email'] = $participant->getParticipantEmail();
                    $parameters['locale'] = $locale;
                    $parameters['host'] = $this->container->getParameter('site_url');
                    $parameters['code'] = $participant->getParticipantEmailCode();
                    $parameters["studies"] = $this->getDoctrine()->getRepository('CyclogramProofPilotBundle:Study')->getRandomStudyInfo($locale, $participant);
                    
                    $cc->sendMail(null,
                            $participant->getParticipantEmail(),
                            $this->get('translator')->trans("email_title_verify", array(), "email", $locale),
                            'CyclogramFrontendBundle:Email:email_confirmation.html.twig',
                            null,
                            $embedded,
                            true,
                            $parameters);
                    $parameters['message'] = $this->get('translator')->trans("email_change", array(), "general_settings", $locale);
                } elseif ($form->get('phoneSendSMS')->isClicked()) {
                    $participantSMSCode = CyclogramCommon::getAutoGeneratedCode(4);
                    $participant->setParticipantMobileSmsCode($participantSMSCode);
                    
                    $sms = $this->get('sms');
                             $message = $this->container->get('translator')->trans('sms_phone_text', array(), "general_settings",  $locale);
                    $sentSms = $sms->sendSmsAction( array('message' => $message.' '.$participantSMSCode, 'phoneNumber'=>$participant->getParticipantMobileNumber()) );
                    if($sentSms) {
                        $session = $request->getSession();
                        $session->set('newPhoneNumber', array($data['newPhoneNumberSmall'],$data['newPhoneNumberWide']));
                        $em->persist($participant);
                        $em->flush($participant);
                        $parameters['message'] = $this->get('translator')->trans("confirm_sms_send", array(), "general_settings", $locale);
                    }
                    $parameters["phoneConfirmShow"] = true;
                    $parameters["expandedFormClass"] = 'mobile';
                } elseif ($form->get('phoneConfirm')->isClicked()) {
                    $session = $request->getSession();
                    if ($session->has('newPhoneNumber')) {
                        $newPhoneNumber = $session->get('newPhoneNumber');
                        $participant->setParticipantMobileNumber($newPhoneNumber[0].$newPhoneNumber[1]);
                        $em->persist($participant);
                        $em->flush($participant);
                        $session->invalidate();
                        $parameters['message'] = $this->get('translator')->trans("mobile_number_change", array(), "general_settings", $locale);
                    }
                } elseif($form->get('incentiveEmailConfirm')->isClicked()) {
                        $participant->setParticipantAppreciationEmail($data['newIncentiveEmail']);
                        $em->persist($participant);
                        $em->flush($participant);
                        $parameters['message'] = $this->get('translator')->trans("appreciation_email_change", array(), "general_settings", $locale);
                } elseif($form->get('languageConfirm')->isClicked()) {
                    $language = $em->getRepository('CyclogramProofPilotBundle:Language')->findOneByLocale($data['languageSelect']);
                    $participant->setParticipantLanguage($language);
                    $participant->setLocale($data['languageSelect']);
                    $em->persist($participant);
                    $em->flush();
                    return $this->redirect($this->generateUrl("_settings", array('_locale' => $data['languageSelect'])));
                }
            } 
            else {
               if($form->get('userNameConfirm')->isClicked()) {
                   $parameters["expandedFormClass"] = 'username';
                } elseif ($form->get('passwordSendSMS')->isClicked()) {
                    $parameters["expandedFormClass"] = 'password';
                } elseif ($form->get('passwordConfirm')->isClicked()) {
                    $parameters["expandedFormClass"] = 'password';
                } elseif ($form->get('emailConfirm')->isClicked()) {
                    $parameters["expandedFormClass"] = 'email';
                } elseif ($form->get('phoneSendSMS')->isClicked()) {
                    $parameters["expandedFormClass"] = 'mobile';
                } elseif ($form->get('phoneConfirm')->isClicked()) {
                    $parameters["expandedFormClass"] = 'mobile';
                } elseif ($form->get('incentiveEmailConfirm')->isClicked()) {
                    $parameters["expandedFormClass"] = 'incentiveEmail';
                } 
            }
        }
        
        $parameters["participant"] = $participant;
        
        $parameters["user"]["name"] = $participant->getParticipantFirstname() . ' ' . $participant->getParticipantLastname();
        $parameters["user"]["username"] = $participant->getParticipantUsername();
        $parameters["user"]["last_access"] = $participant->getParticipantLastTouchDatetime();
        
        $parameters['form'] = $form->createView();
            
        $this->parameters = array_merge($this->parameters, $parameters);
        return $this->render('CyclogramFrontendBundle:GeneralSettings:general_settings.html.twig', $this->parameters);
    }
    
    /**
     * @Route("/shipping_information/{update}", name="_shipping", defaults={"update"=null})
     * @Secure(roles="ROLE_PARTICIPANT, IS_AUTHENTICATED_REMEMBERED")
     * @Template()
     */
    public function generalShippingAction($update)
    {
        $participant = $this->get('security.context')->getToken()->getUser();
        $locale =$participant->getLocale() ? $participant->getLocale() : $request->getLocale();
        $request = $this->getRequest();
        $em = $this->getDoctrine()->getManager();
        $surveyscount = $em->getRepository('CyclogramProofPilotBundle:ParticipantInterventionLink')->getActiveParticipantInterventionsCount($participant);
        $parameters["lastaccess"] = new \DateTime();
        if ($update)
            $parameters["update_data"] = $update;
        $parameters["expandedFormClass"] = '';
        $parameters["participant"] = $participant;
        
        $parameters["user"]["name"] = $participant->getParticipantFirstname() . ' ' . $participant->getParticipantLastname();
        $parameters["user"]["username"] = $participant->getParticipantUsername();
        $parameters["user"]["last_access"] = $participant->getParticipantLastTouchDatetime();
        if($participant->getFacebookId())
            $parameters["user"]["avatar"] = "http://graph.facebook.com/" . $participant->getParticipantUsername() . "/picture?width=80&height=82";
    
        $collectionConstraint = new Collection(array(
                'participantFirstname'     =>  new NotBlank(),
                'participantLastname'        => new NotBlank(),
                'participantAddress1'      => new NotBlank(),
                'participantZipcode' => new NotBlank(),
                'city'     => new NotBlank(),
                'state'    => new NotBlank()
        ));
        $form = $this->createForm(new MailingAddressForm($this->container), array('constraints' => $collectionConstraint));
    
        if ($participant->getParticipantFirstname()){
            $form->get('participantFirstname')->setData($participant->getParticipantFirstname());
        }
        if ($participant->getParticipantLastname()){
            $form->get('participantLastname')->setData($participant->getParticipantLastname());
        }
        if ($participant->getParticipantAddress1()){
            $form->get('participantAddress1')->setData($participant->getParticipantAddress1());
        }
        if ($participant->getParticipantAddress2()){
            $form->get('participantAddress2')->setData($participant->getParticipantAddress2());
        }
        if ($participant->getParticipantZipcode()){
            $form->get('participantZipcode')->setData($participant->getParticipantZipcode());
        }
        if ($participant->getCity()){
            $city = $participant->getCity();
            $form->get('city')->setData($city->getCityName());
            $form->get('cityId')->setData($city->getCityId());
        }
        if ($participant->getState()){
            $state = $participant->getState();
            $form->get('state')->setData($state->getStateCode());
            $form->get('stateId')->setData($state->getstateId());
        }
        $sign = $participant->getParticipantDeliverySign();
        if (isset($sign)){
            if ($sign == true) {
                $form['sign']->setData('sign');
            }else{
                $form['sign']->setData('notSign');
            }
        }
    
        if ($request->getMethod() == 'POST') {
            $form->handleRequest($request);
    
            if ($form->isValid()) {
                $this->get('study_logic')->participantDefaultInterventionLogic($participant, 'shippingInformation');
                $form = $form->getData();
                $participant->setParticipantFirstname($form['participantFirstname']);
                $participant->setParticipantLastname($form['participantLastname']);
                $participant->setParticipantAddress1($form['participantAddress1']);
                $participant->setParticipantAddress2($form['participantAddress2']);
                $participant->setParticipantZipcode($form['participantZipcode']);
                if (!empty($form['cityId'])) {
                    $city = $em->getRepository('CyclogramProofPilotBundle:City')->find($form['cityId']);
                    $participant->setCity($city);
                } else {
                    $participant->setCityName($form['city']);
                }
                if (!empty($form['stateId'])) {
                    $state = $em->getRepository('CyclogramProofPilotBundle:State')->find($form['stateId']);
                    $participant->setState($state);
                } else {
                    $participant->setParticipantState($form['state']);
                }
                $country = $em->getRepository('CyclogramProofPilotBundle:Country')->find(1);
                $participant->setCountry($country);
                if ($form['sign'] == 'notSign')
                    $participant->setParticipantDeliverySign(false);
                else
                    $participant->setParticipantDeliverySign(true);
    
                $em->persist($participant);
                $em->persist($participant);
                $em->flush($participant);
                if ($request->isXmlHttpRequest()) {
                    $result = $this->get('study_logic')->potentialInterventionLogic($form['interventionCode'], $participant, $form['interventionType']);
                    if ($result)
                        return new Response(json_encode(array('error' => false,'url' => $this->generateUrl("_main"))));
                    else 
                        return new Response(json_encode(array('error' => false, 'message' =>  $this->get('translator')->trans("to_complete_intervention", array(), "shipping_information", $locale))));
                } else {
                     return $this->redirect($this->generateUrl("_shipping",
                                array('update' => true)));
                }
 
            } elseif ($request->isXmlHttpRequest()) {
                $messages = array();
                $validator = $this->container->get('validator');
                $errors = $validator->validate($form);
                foreach ($errors as $err) {
                    if(strpos($err->getPropertyPath(),'[')) {
                        $property = substr($err->getPropertyPath(),strpos($err->getPropertyPath(),'[')+1,strlen($err->getPropertyPath()));
                        $len = strpos($property,']');
                        $property = substr($property,0,$len);
                    }
                    $messages[]= array('property' => $property ,
                            'message' => $err->getMessage());
                }
                return new Response(json_encode(array('error' => true,'messages' => $messages)));
            }
        }
        
        $parameters['formShippingInformation'] = $form->createView();
        
        $this->parameters = array_merge($this->parameters, $parameters);
        return $this->render('CyclogramFrontendBundle:GeneralSettings:shipping_information.html.twig', $this->parameters);
    }
    
    /**
     * @Route("/about_me", name="_about_me")
     * @Secure(roles="ROLE_PARTICIPANT, IS_AUTHENTICATED_REMEMBERED")
     * @Template()
     */
    public function aboutMeAction() {
        $participant = $this->get('security.context')->getToken()->getUser();
        $request = $this->getRequest();
        $em = $this->getDoctrine()->getManager();
        $locale =$participant->getLocale() ? $participant->getLocale() : $request->getLocale();
        $parameters["lastaccess"] = new \DateTime();
        $parameters["expandedFormClass"] = '';
         
        if($participant->getFacebookId())
            $parameters["user"]["avatar"] = "http://graph.facebook.com/" . $participant->getParticipantUsername() . "/picture?width=80&height=82";
        
        $form = $this->createForm(new AboutMeForm($this->container));
        
        if ($request->getMethod() == 'POST') {
            $form->handleRequest($request);
        
            if ($form->isValid()) {
                $data = $form->getData();
                $form->get('countryConfirm');
                if($form->get('countryConfirm')->isClicked() || ($data['validationCheck'] == 'country')) {
                    $participant->setCountry($data['countrySelect']);
                    $em->persist($participant);
                    $em->flush();
                    if ($request->isXmlHttpRequest())
                        return new Response(json_encode(array('error' => false, 'message' => $this->get('translator')->trans("country_change", array(), "about_me", $locale), 'data' => $data['countrySelect']->getCountryName(), 'name' => 'country')));
                    else
                        $parameters['message'] = $this->get('translator')->trans("country_change", array(), "about_me", $locale);
                } elseif ($form->get('zipcodeConfirm')->isClicked() || ($data['validationCheck'] == 'zipcode')) {
                    $participant->setParticipantZipCode($data['newzipcode']);
                    $em->persist($participant);
                    $em->flush();
                    if ($request->isXmlHttpRequest())
                        return new Response(json_encode(array('error' => false, 'message' => $this->get('translator')->trans("zipcode_change", array(), "about_me", $locale), 'data' => $data['newzipcode'], 'name' => 'zipcode')));
                    else
                        $parameters['message'] = $this->get('translator')->trans("zipcode_change", array(), "about_me", $locale);
                } elseif ($form->get('birthdateConfirm')->isClicked() || ($data['validationCheck'] == 'birthdate')) {
                    $datePices = explode("/", $data['birthdateSelect']);
                    $date = new \DateTime($datePices[2].'-'.$datePices[0].'-'.$datePices[1]);
                    $participant->setParticipantBirthdate($date );
                    $em->persist($participant);
                    $em->flush();
                    if ($request->isXmlHttpRequest())
                        return new Response(json_encode(array('error' => false, 'message' => $this->get('translator')->trans("birthdate_change", array(), "about_me", $locale), 'data' => $data['birthdateSelect'], 'name' => 'birthdate')));
                    else
                        $parameters['message'] = $this->get('translator')->trans("birthdate_change", array(), "about_me", $locale);
                } elseif ($form->get('sexConfirm')->isClicked() || ($data['validationCheck'] == 'sex')) {
                    $sex =  $em->getRepository('CyclogramProofPilotBundle:Sex')->findOneBySexName($data['sexSelect']);
                    $participant->setSex($sex);
                    $em->persist($participant);
                    $em->flush();
                    if ($request->isXmlHttpRequest())
                        return new Response(json_encode(array('error' => false, 'message' => $this->get('translator')->trans("sex_change", array(), "about_me", $locale), 'data' => $sex->getSexName(), 'name' => 'sex')));
                    else
                        $parameters['message'] = $this->get('translator')->trans("sex_change", array(), "about_me", $locale);
                } elseif ($form->get('interestedConfirm')->isClicked() || ($data['validationCheck'] == 'interested')) {
                    $interested= "";
                    foreach ($data['interestedSelect'] as $interest){
                        $interested.= $interest;
                    }
                    $participant->setParticipantInterested($interested);
                    $em->persist($participant);
                    $em->flush();
                    if (isset($interested) && $interested == 'w') {
                        $interest = 'Woman';
                    } elseif (isset($interested) && $interested == 'm') {
                        $interest= 'Man';
                    } elseif (isset($interested) && $interested == 'mw') {
                        $interest = 'Man&Woman';
                    }else {
                        $interest = "";
                    }
                    if ($request->isXmlHttpRequest())
                        return new Response(json_encode(array('error' => false, 'message' => $this->get('translator')->trans("interest_change", array(), "about_me", $locale), 'data' => $interest, 'name' => 'interested')));
                    else
                        $parameters['message'] = $this->get('translator')->trans("interest_change", array(), "about_me", $locale);
                } elseif ($form->get('raceConfirm')->isClicked() || ($data['validationCheck'] == 'race')) {
                    $race = $em->getRepository('CyclogramProofPilotBundle:Race')->findOneByRaceName($data['raceSelect']);
                    $participant->setRace($race);
                    $em->persist($participant);
                    $em->flush();
                    if ($request->isXmlHttpRequest())
                        return new Response(json_encode(array('error' => false, 'message' => $this->get('translator')->trans("race_change", array(), "about_me", $locale), 'data' => $data['raceSelect'], 'name' => 'race')));
                    else
                        $parameters['message'] = $this->get('translator')->trans("race_change", array(), "about_me", $locale);
                } elseif ($data['validationCheck'] == 'formConfirm') {
                    if ($request->isXmlHttpRequest()) {
                        $result = $this->get('study_logic')->potentialInterventionLogic($data['interventionCode'], $participant, $data['interventionType']);
                        if ($result)
                            return new Response(json_encode(array('error' => false,'url' => $this->generateUrl("_main"), 'completed' => true)));
                        else
                            return new Response(json_encode(array('error' => false, 'message' =>  $this->get('translator')->trans("to_complete_intervention", array(), "shipping_information", $locale),'completed' => true)));
                    }
                }
            }
            else {
                if ($request->isXmlHttpRequest()) {
                    $messages = array();
                    $validator = $this->container->get('validator');
                    $errors = $validator->validate($form);
                    foreach ($errors as $err) {
                        if(strpos($err->getPropertyPath(),'[')) {
                            $property = substr($err->getPropertyPath(),strpos($err->getPropertyPath(),'[')+1,strlen($err->getPropertyPath()));
                            $len = strpos($property,']');
                            $property = substr($property,0,$len);
                        }
                        $messages[]= array('property' => $property ,
                                'message' => $err->getMessage());
                    }
                    return new Response(json_encode(array('error' => true,'messages' => $messages)));
                }
                if($form->get('countryConfirm')->isClicked()) {
                    $parameters["expandedFormClass"] = 'country';
                } elseif ($form->get('zipcodeConfirm')->isClicked()) {
                    $parameters["expandedFormClass"] = 'zipCode';
                } elseif ($form->get('birthdateConfirm')->isClicked()) {
                    $parameters["expandedFormClass"] = 'birthdate';
                } elseif ($form->get('sexConfirm')->isClicked()) {
                    $parameters["expandedFormClass"] = 'sex';
                } elseif ($form->get('interestedConfirm')->isClicked()) {
                    $parameters["expandedFormClass"] = 'interested';
                } elseif ($form->get('raceConfirm')->isClicked()) {
                    $parameters["expandedFormClass"] = 'race';
                } 
            }
        }
        $interested = $participant->getParticipantInterested();
        if (isset($interested) && $interested == 'w') {
            $parameters['interest'] = 'Woman';
        } elseif (isset($interested) && $interested == 'm') {
            $parameters['interest'] = 'Man';
        } elseif (isset($interested) && $interested == 'mw') {
            $parameters['interest'] = 'Man&Woman';
        }else {
            $parameters['interest'] = "";
        }
        $parameters['participant'] = $participant;
        $parameters["user"]["name"] = $participant->getParticipantFirstname() . ' ' . $participant->getParticipantLastname();
        $parameters["user"]["username"] = $participant->getParticipantUsername();
        $parameters["user"]["last_access"] = $participant->getParticipantLastTouchDatetime();
        $parameters['formAboutMe'] = $form->createView();
        
        $this->parameters = array_merge($this->parameters, $parameters);
        return $this->render('CyclogramFrontendBundle:GeneralSettings:about_me.html.twig', $this->parameters);
    }
    
    /**
     * @Route("/mobile_phone", name="_mobile_phone")
     * @Secure(roles="ROLE_PARTICIPANT, IS_AUTHENTICATED_REMEMBERED")
     * @Template()
     */
    public function mobilePhoneAction()
    {
        $session = $this->getRequest()->getSession();
        $participant = $this->get('security.context')->getToken()->getUser();
        $request = $this->getRequest();
        $em = $this->getDoctrine()->getManager();
        $locale =$participant->getLocale() ? $participant->getLocale() : $request->getLocale();
        $form = $this->createForm(new MobilePhoneForm($this->container));
        $phone = CyclogramCommon::parsePhoneNumber($participant->getParticipantMobileNumber());
        if (!empty($phone)) {
            $form->get('phone_small')->setData($phone['country_code']);
            $form->get('phone_wide')->setData($phone['phone']);
        }
        
        $clientIp = $request->getClientIp();
        if ($clientIp == '127.0.0.1') {
            $form->get('phone_small')->setData(380);
        }
        $geoip = $this->get('maxmind.geoip')->lookup($clientIp);
        if ($geoip != false) {
            $countryCode = $geoip->getCountryCode();
            $country = $em->getRepository('CyclogramProofPilotBundle:Country')->findOneByCountryCode($countryCode);
            if (isset($country)){
                $form->get('phone_small')->setData($country->getDailingCode());
            }
        }
        if ($request->getMethod() == 'POST' && $request->isXmlHttpRequest()) {
            $form->handleRequest($request);
        
            if ($form->isValid()) {
                $data = $form->getData();
                $customerMobileNumber = $data['phone_small'].$data['phone_wide'];
                $session->set('mobile_phone', $customerMobileNumber);
                $participantSMSCode = CyclogramCommon::getAutoGeneratedCode(4);
                $participant->setParticipantMobileSmsCode($participantSMSCode);
                $em->persist($participant);
                $em->flush($participant);
                
                $sms = $this->get('sms');
                $message = $this->get('translator')->trans('sms_verification_message', array(), 'dashboard');
                $sentSms = $sms->sendSmsAction( array('message' => $message . ' ' . $participantSMSCode, 'phoneNumber'=>"$customerMobileNumber") );
                if($sentSms)
                    return new Response(json_encode(array('error' => false)));
            } elseif ($request->isXmlHttpRequest()) {
            $messages = array();
            $validator = $this->container->get('validator');
            $errors = $validator->validate($form);
            foreach ($errors as $err) {
                if(strpos($err->getPropertyPath(),'[')) {
                    $property = substr($err->getPropertyPath(),strpos($err->getPropertyPath(),'[')+1,strlen($err->getPropertyPath()));
                    $len = strpos($property,']');
                    $property = substr($property,0,$len);
                } elseif (strpos($err->getPropertyPath(),'.')) {
                    $property = substr($err->getPropertyPath(),strpos($err->getPropertyPath(),'.')+1,strlen($err->getPropertyPath()));
                }
                $messages[]= array('property' => $property ,
                        'message' => $err->getMessage());
            }
            return new Response(json_encode(array('error' => true,'messages' => $messages)));
        }
    }
    }

    
    /**
     * @Route("/mobile_phone_confirm", name="_mobile_phone_confirm")
     * @Secure(roles="ROLE_PARTICIPANT, IS_AUTHENTICATED_REMEMBERED")
     * @Template()
     */
    public function mobilePhoneConfirmAction()
    {
        $session = $this->getRequest()->getSession();
        $participant = $this->get('security.context')->getToken()->getUser();
        $request = $this->getRequest();
        $em = $this->getDoctrine()->getManager();
        $locale =$participant->getLocale() ? $participant->getLocale() : $request->getLocale();
        $requestData = $request->request->all();
        if (isset($requestData['send'])) {
            $customerMobileNumber = $session->get('mobile_phone');
            $participantSMSCode = CyclogramCommon::getAutoGeneratedCode(4);
            $participant->setParticipantMobileSmsCode($participantSMSCode);
            $em->persist($participant);
            $em->flush($participant);
            
            $sms = $this->get('sms');
            $message = $this->get('translator')->trans('sms_verification_message', array(), 'dashboard');
            
            $sentSms = $sms->sendSmsAction( array('message' => $message . ' ' . $participantSMSCode, 'phoneNumber'=>"$customerMobileNumber") );
            if($sentSms)
                return new Response(json_encode(array('error' => false, 'send' => true)));
        }
        $form = $this->createForm(new UserSmsCodeForm($this->container));
        $userSMS = $participant->getParticipantMobileSmsCode();
        
        if ($request->getMethod() == 'POST' && $request->isXmlHttpRequest()) {
            $form->handleRequest($request);
    
            if ($form->isValid()) {
                $data = $form->getData();
                if ($data['sms_code'] == $userSMS) {
                    $participant->setParticipantMobileSmsCodeConfirmed(true);
                    $participant->setParticipantMobileNumber($session->get('mobile_phone'));
                    $em->persist($participant);
                    $em->flush($participant);
                    $session->remove('mobile_phone');
                } else {
                return new Response(json_encode(array('error' => false,'message' => $this->get('translator')->trans("wrong_sms", array(), "dashboard", $locale))));
                }
                $result = $this->get('study_logic')->potentialInterventionLogic($data['interventionCode'], $participant, $data['interventionType']);
                if ($result)
                    return new Response(json_encode(array('error' => false,'url' => $this->generateUrl("_main"))));
            }
        } elseif ($request->isXmlHttpRequest()) {
            $messages = array();
            $validator = $this->container->get('validator');
            $errors = $validator->validate($form);
            foreach ($errors as $err) {
                if(strpos($err->getPropertyPath(),'[')) {
                    $property = substr($err->getPropertyPath(),strpos($err->getPropertyPath(),'[')+1,strlen($err->getPropertyPath()));
                    $len = strpos($property,']');
                    $property = substr($property,0,$len);
                }
                $messages[]= array('property' => $property ,
                        'message' => $err->getMessage());
            }
            return new Response(json_encode(array('error' => true,'messages' => $messages)));
        }
    }
    
    /**
     * @Route("/about_me_new", name="_about_me_new")
     * @Secure(roles="ROLE_PARTICIPANT, IS_AUTHENTICATED_REMEMBERED")
     * @Template()
     */
    public function aboutMeNewAction() {
        $locale = $this->getRequest()->getLocale();
        $request = $this->getRequest();
        $em = $this->getDoctrine()->getManager();
        $session = $request->getSession();
        $participant = $this->get('security.context')->getToken()->getUser();
        
        $form = $this->createForm(new SignUpAboutForm($this->container));
        $participantData = $this->aboutMeParticipantData($participant, $form);
        $clientIp = $request->getClientIp();
        if ($clientIp == '127.0.0.1'|| strpos($clientIp, '192.168.244.')!== false) {
            $country = $this->container->get('doctrine')->getRepository('CyclogramProofPilotBundle:Country')->findOneByCountryCode('UA');
        }
        $geoip = $this->container->get('maxmind.geoip')->lookup($clientIp);
        if ($geoip != false) {
            $countryCode = $geoip->getCountryCode();
            $country = $this->container->get('doctrine')->getRepository('CyclogramProofPilotBundle:Country')->findOneByCountryCode($countryCode);
        }
        
        if ($request->getMethod() == 'POST') {
            $data = $request->request->all();
            $message = null;
            $participantData = array();
            if (isset($data['signup_about']['raceSelect'])) {
                foreach ($data['signup_about']['raceSelect'] as $race) {
                    if ($race = $em->getRepository('CyclogramProofPilotBundle:Race')->find($race)) {
                        $raceLink = new ParticipantRaceLink();
                        $raceLink->setParticipant($participant);
                        $raceLink->setRace($race);
                        $em->persist($raceLink);
                        $em->flush();
                        $participantData['RACE'][] = $race->getRaceId();
                    } else {
                        $message[] = " race ";
                    }
                }
            } else {
                $participantData['RACE'] = null;
            }
             
            if (!empty($data['sexSelect'])) {
                if($sex = $em->getRepository('CyclogramProofPilotBundle:Sex')->find($data['sexSelect'])){
                    $participant->setSex($sex);
                    $participantData['SEX'] = $sex->getSexId();
                } else {
                    $message[] =" sex ";
                }
            } else {
                $participantData['SEX'] = null;
            }
        
            if (!empty($data['countrySelect'])) {
                if($participantcountry = $em->getRepository('CyclogramProofPilotBundle:Country')->find($data['countrySelect'])) {
                    $participant->setCountry($participantcountry);
                    $participantData['COUNTRY'] = $participantcountry->getCountryId();
                } else {
                    $message[] =" country ";
                }
            } else {
                $participantData['COUNTRY'] = null;
            }
        
            if (isset($data['signup_about']['zipcode']) && !empty($data['signup_about']['zipcode'])) {
                $participant->setParticipantZipcode($data['signup_about']['zipcode']);
                $participantData['ZIPCODE'] = $data['signup_about']['zipcode'];
            } else {
                $participantData['ZIPCODE'] = null;
            }
        
            if (!empty($data['signup_about']['yearsSelect']) || !empty($data['monthsSelect']) || !empty($data['signup_about']['daysSelect'])) {
                $date = new \DateTime();
                if($date = $date->setDate((int)$data['signup_about']['yearsSelect'], (int)$data['monthsSelect'], (int)$data['signup_about']['daysSelect'])) {
                    $participant->setParticipantBirthdate($date);
                    $currentDate = new \DateTime();
                    $diff = $currentDate->diff($date);
                    $participant->setAge($diff->y);
                    $participantData['AGE'] = $diff->y;
                }else{
                    $message[] = " birthdate ";
                }
            } else {
                $participantData['AGE'] = null;
            }
            if (!empty($data['gradeSelect'])) {
                if ($gradeLevel = $em->getRepository('CyclogramProofPilotBundle:GradeLevel')->find($data['gradeSelect'])) {
                   $participant->setGradeLevel($gradeLevel);
                   $participantData['GRADELEVEL'] = $gradeLevel->getGradeLevelId();
                } else {
                    $message[] = ' grade level ';
                }
            }else {
                $participantData['GRADELEVEL'] = null;
            }
        
            if (!empty($data['industrySelect'])) {
                if ($industry = $em->getRepository('CyclogramProofPilotBundle:Industry')->find($data['industrySelect'])) {
                    $participant->setIndustry($industry);
                    $participantData['INDUSTRY'] = $industry->getIndustryId();
                } else {
                    $message[] = ' industry ';
                }
            }else {
                $participantData['INDUSTRY'] = null;
            }
        
            if (isset($data['signup_about']['anunalIncome'])) {
                $participant->setAnnualIncome($data['signup_about']['anunalIncome']);
                $participantData['INCOME'] = $data['signup_about']['anunalIncome'];
            } else {
                $participantData['INCOME'] = null;
            }
        
            if (!empty($data['maritalStatusSelect'])) {
                if ($maritalStatus = $em->getRepository('CyclogramProofPilotBundle:MaritalStatus')->find($data['maritalStatusSelect'])) {
                    $participant->setMaritalStatus($maritalStatus);
                    $participantData['MARITALSTATUS'] = $maritalStatus->getMaritalStatusId();
                }else{
                    $message[] = ' marital status ';
                }
            } else {
                $participantData['MARITALSTATUS'] = null;
            }
            $participant->setParticipantInterested($data['interestedSelect']);
            if ($data['interestedSelect'] == 'm')
                $participantData['SEXWITH'] = 1;
            if ($data['interestedSelect'] == 'w')
                $participantData['SEXWITH'] = 2;
            if ($data['interestedSelect'] == 'mw'){
                $participantData['SEXWITH'][] = 1;
                $participantData['SEXWITH'][] = 2;
            }
        
            if (isset($data['childrenSelect']) ){
                 if ($data['childrenSelect'] == 'have') {
                     $participant->setChildren(1);
                     $participantData['CHILDREN'] = 'Y';
                 }
                 if ($data['childrenSelect'] == 'nothave') {
                     $participant->setChildren(0);
                     $participantData['CHILDREN'] = 'N';
                 };
                 if (empty($data['childrenSelect'])) {
                     $participant->setChildren(0);
                     $participantData['CHILDREN'] = 'N';
                 }
            } else {
                $participantData['CHILDREN'] = null;
            }
        
            $participantData['PHONE'] = $participant->getParticipantMobileNumber();
            $participantData['MAILING_ADDRESS'] = $participant->getParticipantAddress1();
            $participant->setParticipantBasicInformation(true);
            $participant->setParticipantAboutMe(json_encode($participantData));
            
            $em->persist($participant);
            $em->flush();
        
            if ($request->isXmlHttpRequest()) {
                if (!is_null($message))
                    return new Response(json_encode(array('error' => true, 'message' => 'Invalid : '.implode(',', $message) )));
                $result = $this->get('study_logic')->potentialInterventionLogic($data['signup_about']['interventionCode'], $participant, $data['signup_about']['interventionType']);
                if ($result)
                    return new Response(json_encode(array('error' => false,'url' => $this->generateUrl("_main"))));
                else
                    return new Response(json_encode(array('error' => false, 'message' =>  $this->get('translator')->trans("to_complete_intervention", array(), "shipping_information", $locale))));
            }
            $participantData = $this->aboutMeParticipantData($participant, $form);
            if(!is_null($message)) {
                $this->parameters = array_merge($this->parameters,array (
                                'formAbout' => $form->createView(),
                                'countryName' => $country->getCountryName(),
                                'countryId' => $country->getCountryId(),
                                'currencySymbol' => $country->getCurrency()->getCurrencySymbol(),
                                'error' =>'Invalid : '.implode(',', $message),
                                'data' => $participantData
                        ));
                return $this->render('CyclogramFrontendBundle:GeneralSettings:about_me_new.html.twig',$this->parameters);
            } else  {
                $this->parameters = array_merge($this->parameters, array (
                                'formAbout' => $form->createView(),
                                'countryName' => $country->getCountryName(),
                                'countryId' => $country->getCountryId(),
                                'currencySymbol' => $country->getCurrency()->getCurrencySymbol(),
                                'update' =>true,
                                'data' => $participantData
                        ));
                return $this->render('CyclogramFrontendBundle:GeneralSettings:about_me_new.html.twig', $this->parameters);
            }
        }
        $this->parameters = array_merge($this->parameters,                 array (
                        'formAbout' => $form->createView(),
                        'countryName' => $country->getCountryName(),
                        'countryId' => $country->getCountryId(),
                        'currencySymbol' => $country->getCurrency()->getCurrencySymbol(),
                        'data' =>$participantData
                ));
        return $this->render('CyclogramFrontendBundle:GeneralSettings:about_me_new.html.twig',$this->parameters);
    }
    
    private function aboutMeParticipantData($participant,$form) {
        $participantData=null;
        $em = $this->getDoctrine()->getManager();
        if ($participant->getCountry()){
            $participantData['country'] = $participant->getCountry();
        }
        if ($participant->getParticipantZipcode()){
            $form->get('zipcode')->setData($participant->getParticipantZipcode());
        }
        if($participant->getParticipantBirthdate()) {
            $date = $participant->getParticipantBirthdate();
            $participantData['monthsLabel'] = date_format($date, 'M');
            $participantData['months'] = date_format($date, 'm');
            $form->get('daysSelect')->setData(date_format($date, 'd'));
            $form->get('yearsSelect')->setData(date_format($date, 'Y'));
        }
        if($participant->getSex()) {
            $participantData['sex'] = $participant->getSex();
        }
        if($participant->getParticipantInterested()){
            if ($participant->getParticipantInterested() == 'w') {
                $participantData['interested'] = 'w';
                $participantData['interestedLabel'] = 'women';
            } elseif ($participant->getParticipantInterested() == 'm') {
                $participantData['interested'] = 'm';
                $participantData['interestedLabel'] = 'men';
            } elseif ($participant->getParticipantInterested() == 'mw') {
                $participantData['interested']= 'mw';
                $participantData['interestedLabel'] = 'men & women';
            }
        }
        if($participant->getGradeLevel()) {
            $participantData['grade'] = $participant->getGradeLevel();
        }
        if($participant->getIndustry()) {
            $participantData['industry'] = $participant->getIndustry();
        }
        if($participant->getAnnualIncome()) {
            $form->get('anunalIncome')->setData($participant->getAnnualIncome());
        }
        if($participant->getMaritalStatus()){
            $participantData['marital'] = $participant->getMaritalStatus();
        }
        if($participant->getChildren()){
            if ($participant->getChildren()== 1) {
                $participantData['children'] = 'have';
                $participantData['childrenLabel'] = 'have';
            }
            if ($participant->getChildren()== 0){
                $participantData['children'] = 'nothave';
                $participantData['childrenLabel'] = 'do not have';
            }
        }
        $participantRaces = $em->getRepository('CyclogramProofPilotBundle:ParticipantRaceLink')->findByParticipant($participant);
        if (isset($participantRaces) && !empty($participantRaces)){
            $race = $participantRaces[0]->getRace();
            $participantData['race']= $race;
            foreach ($participantRaces as $participantRace) {
                $participantData['raceIds'][] = $participantRace->getRace()->getRaceId();
            }
        }
        return $participantData;
    }
}
